// Generated by gencpp from file telegram_ros/Options.msg
// DO NOT EDIT!


#ifndef TELEGRAM_ROS_MESSAGE_OPTIONS_H
#define TELEGRAM_ROS_MESSAGE_OPTIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace telegram_ros
{
template <class ContainerAllocator>
struct Options_
{
  typedef Options_<ContainerAllocator> Type;

  Options_()
    : question()
    , options()  {
    }
  Options_(const ContainerAllocator& _alloc)
    : question(_alloc)
    , options(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _question_type;
  _question_type question;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _options_type;
  _options_type options;





  typedef boost::shared_ptr< ::telegram_ros::Options_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::telegram_ros::Options_<ContainerAllocator> const> ConstPtr;

}; // struct Options_

typedef ::telegram_ros::Options_<std::allocator<void> > Options;

typedef boost::shared_ptr< ::telegram_ros::Options > OptionsPtr;
typedef boost::shared_ptr< ::telegram_ros::Options const> OptionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::telegram_ros::Options_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::telegram_ros::Options_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::telegram_ros::Options_<ContainerAllocator1> & lhs, const ::telegram_ros::Options_<ContainerAllocator2> & rhs)
{
  return lhs.question == rhs.question &&
    lhs.options == rhs.options;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::telegram_ros::Options_<ContainerAllocator1> & lhs, const ::telegram_ros::Options_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace telegram_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::telegram_ros::Options_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::telegram_ros::Options_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::telegram_ros::Options_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::telegram_ros::Options_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::telegram_ros::Options_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::telegram_ros::Options_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::telegram_ros::Options_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95c5cf65731d4dcf4593661dbe57ef01";
  }

  static const char* value(const ::telegram_ros::Options_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95c5cf65731d4dcfULL;
  static const uint64_t static_value2 = 0x4593661dbe57ef01ULL;
};

template<class ContainerAllocator>
struct DataType< ::telegram_ros::Options_<ContainerAllocator> >
{
  static const char* value()
  {
    return "telegram_ros/Options";
  }

  static const char* value(const ::telegram_ros::Options_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::telegram_ros::Options_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string question\n"
"string[] options\n"
;
  }

  static const char* value(const ::telegram_ros::Options_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::telegram_ros::Options_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.question);
      stream.next(m.options);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Options_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::telegram_ros::Options_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::telegram_ros::Options_<ContainerAllocator>& v)
  {
    s << indent << "question: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.question);
    s << indent << "options[]" << std::endl;
    for (size_t i = 0; i < v.options.size(); ++i)
    {
      s << indent << "  options[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.options[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELEGRAM_ROS_MESSAGE_OPTIONS_H
